import java.util.ArrayList;
import java.util.List;


public class Board {
    private final char[] board;
    private int n;
    private int row = -1;
    private int column = -1;
    private List<Board> neighbour = new ArrayList<>();

    public Board(int[][] tiles) {
        n = tiles[0].length;
        board = new char[n * n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                board[n * i + j] = (char) tiles[i][j];
                if (board[n * i + j] == 0) {
                    row = i;
                    column = j;
                }
            }

    }

    public static void main(String[] args) {

    }

    private Board swap(char[] board, int row, int column, int i, int column2) {
        int dimension = n;
        int[][] board2 = new int[dimension][dimension];
        for (int j = 0; j < n; j++) {
            for (int k = 0; k < n; k++) {
                board2[j][k] = (int) board[n * j + k];
            }
        }
        int temp = board2[row][column];
        board2[row][column] = board2[i][column2];
        board2[i][column2] = temp;
        Board result = new Board(board2);
        return result;
    }

    private boolean isIndex(int rowIndex, int columnIndex) {
        return rowIndex < n && rowIndex >= 0 && columnIndex >= 0 && columnIndex < n;
    }



    public int hamming() {
        int count = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (board[n * i + j] != (char) 0)
                                   if (board[n * i + j] != (char) n * i + j + 1) {
                        count++;
                    }
            }
        }
        return count;
    }

    public int distance() {
        int total = 0, dest, destRow, destColumn;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dest = (int) board[n * i + j];
                destRow = (dest - 1) / n;
                destColumn = (dest - 1) % n;
                total += Math.abs((destRow - i)) + Math.abs((destColumn - j));
            }
        }
        return total;
    }

    public boolean isGoal() {
        return distance() == 0;
    }

    public Board clone() {
        if (board[0] != (char) 0 && board[n * n - 1] != (char) 0) {
            return swap(board, 0, 0, n - 1, n - 1);
        } else if (board[0] == (char) 0) {
            return swap(board, 0, 1, n - 1, n - 1);
        } else if (board[n * n - 1] == (char) 0) return swap(board, 0, 0, n - 2, n - 1);
        return null;
    }

    public boolean equals(Object y) {
        if (y == null){
            return false;
        }
        if (this.getClass() != y.getClass()){
            return false;
        }
        if (y == this){
            return true;
        }
        Board other = (Board) y;
        if (other.n == this.n) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (this.board[n * i + j] != other.board[n * i + j]) {
                        return false;
                    }
                }
            }
            return true;
        } else return false;
    }

    public Iterable<Board> next() {
        if (neighbour.isEmpty()) {
            if (isIndex(row, column - 1))
                neighbour.add(swap(board, row, column - 1, row, column));
            if (isIndex(row - 1, column))
                neighbour.add(swap(board, row - 1, column, row, column));
            if (isIndex(row + 1, column))
                neighbour.add(swap(board, row, column, row + 1, column));
            if (isIndex(row, column + 1))
                neighbour.add(swap(board, row, column + 1, row, column));
        }
        return neighbour;
    }

    public String toString() {
        String str;
        str = n + "\n";
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                str += ((int) board[n * i + j]) + " ";
            }
            str += "\n";
        }
        return str;
    }



}
        }
