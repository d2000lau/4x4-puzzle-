import java.util.Random;

public class AStar {
	private Search current;

	/**
	 * solves the board using A* algorithm
	 * 
	 * @author Dennis Lau, Mumbi Gachara, Gerwin van der Ende, Amber Dassen
	 * @param start starting board matrix
	 */
	public AStar(Board start) {
		// create queue using the MinPQ package from edu.princeton.cs.algs4
		MinPQ<Search> minPQ = new MinPQ<>();
		current = new Search(start, null); // initialization
		minPQ.insert(current);
		Search twinNode = new Search(start.twin(), null); // exchanging two positions
		MinPQ<Search> minTwinNode = new MinPQ<>();
		minTwinNode.insert(twinNode);

		boolean check = false;
		while (!check) {
			current = minPQ.delMin(); // least value
			if (current.board.isGoal()) {
				check = true;
			} else {
				insertNeighbor(current, minPQ);
			}
			// computation on new board after restructure
			twinNode = minTwinNode.delMin(); // least value
			if (twinNode.board.isGoal()) {
				check = true;
			} else {
				insertNeighbor(twinNode, minTwinNode);
			}

		}
	}

	public static void main(String[] args) {
	//initialize matrix, labels do not matter
		int[][] matrix = new int[4][4];
		matrix[0][0] = 1;
		matrix[0][1] = 2;
		matrix[0][2] = 3;
		matrix[0][3] = 4;
		matrix[1][0] = 5;
		matrix[1][1] = 0;
		matrix[1][2] = 7;
		matrix[1][3] = 8;
		matrix[2][0] = 9;
		matrix[2][1] = 6;
		matrix[2][2] = 11;
		matrix[2][3] = 12;
		matrix[3][0] = 13;
		matrix[3][1] = 10;
		matrix[3][2] = 14;
		matrix[3][3] = 15;
		
		//shuffle the tiles in the board to generate a random board 
		Random random = new Random();

		for (int i = matrix.length - 1; i > 0; i--) {
			for (int j = matrix[i].length - 1; j > 0; j--) {
				int m = random.nextInt(i + 1);
				int n = random.nextInt(j + 1);

				int temp = matrix[i][j];
				matrix[i][j] = matrix[m][n];
				matrix[m][n] = temp;
			}
		}

		// solve if the generated puzzle is solvable
		int xBlank = getBlank(matrix);
		if (isSolvable(matrix, xBlank)) {
			Board board = new Board(matrix);
			AStar solve = new AStar(board);
			// Create an iteration that stores the new board after every solve
			Iterable<Board> iteration = solve.solution();
			// print new board after every move and total number of moves to get solution
			for (Board x : iteration) {
				System.out.println(x.toString());
			}
		} else {
			System.out.print("Puzzle cannot be solved");
		}
	}

	/**
	 * gets the row of the blank tile
	 * 
	 * @param board board to search for blank tile
	 * @return index of row of blank tile or -1 if there is no blank tile
	 */
	private static int getBlank(int[][] board) {
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 4; j++) {
				if (board[i][j] == 0) {
					return i;
				}
			}
		}
		return -1;
	}

	/**
	 * checks if given board is solvable
	 * 
	 * @param board  board to check for feasibility
	 * @param xBlank index of the row of the blank tile
	 * @return true if the board can be solved
	 */
	private static boolean isSolvable(int[][] board, int xBlank) {
		int inversions = 0;
		int temp = board[0][0];

		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 4; j++) {

				if (board[i][j] > temp) {
					inversions++;
				}
				temp = board[i][j];
			}
		}
		return (xBlank == 1 || xBlank == 3 && inversions % 2 == 0)
				|| (xBlank == 0 || xBlank == 2 && inversions % 2 != 0);
	}

	/**
	 * adds a neighbouring board into the priority queue
	 * 
	 * @param current current node
	 * @param pMinPQ  least priority node value
	 */
	private void insertNeighbor(Search current, MinPQ<Search> pMinPQ) {
		Iterable<Board> boards = current.board.neighbors(); // all neighbouring boards
		for (Board neighborsBoard : boards) {
			if (current.previous == null || !neighborsBoard.equals(current.previous.board)) // prevent backtrack
				pMinPQ.insert(new Search(neighborsBoard, current)); // add neighbor priority queue
		}
	}

	/**
	 * checks if the board has been solved
	 * 
	 * @return true if board has been solved, false otherwise
	 */
	public boolean solveCheck() {
		return current.board.isGoal();
	}

	/**
	 * gets all boards traversed to get to the solution
	 * 
	 * @return returns sequence of optimal shortest solution, return null if cant
	 *         solve
	 */
	public Iterable<Board> solution() {
		if (!solveCheck())
			return null;
		Stack<Board> stack = new Stack<>();
		while (current != null) {
			stack.push(current.board);
			current = current.previous;
		}
		return stack;
	}

	private class Search implements Comparable<Search> {
		private final Board board;
		private final int priority;
		private final int moves;
		private Search previous = null;

		public Search(Board board, Search previous) {
			this.board = board;
			this.previous = previous;
			if (previous == null) {
				moves = 0;
			} else {
				moves = previous.moves + 1;
			}
			priority = board.manhattan() + moves;
			// priority = moves; dijkstra
		}

		/**
		 * compares two objects
		 * 
		 * @param y the object to be compared.
		 * @return returns -1 if smaller than y, 1 if greater
		 */
		public int compareTo(Search y) {
			return Integer.compare(this.priority, y.priority);
		}
	}
}
