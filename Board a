import java.util.ArrayList;
import java.util.List;

public class board {
    private final int[][] state;
    private final int gScore;
    private final int fScore;
    private int hScore;
    private final int[] blank = new int[2];
    private final List<Integer> neighbour = new ArrayList<>();
    private final List<String> moves;




    public board(int[][] board, List<String> gscore){
        moves = gscore;

        this.state = board;
        this.gScore = gscore.size();

        int[][] boardSolution = new int[4][4];
        List<Integer> solution = new ArrayList<>();

        for (int i = 0 ; i < 15; i++){
            solution.add(i+1);
        }

        solution.add(0);
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                int number = i * 4 + j;
                boardSolution[i][j] = (solution.get(number));
            }
        }
        int difference = 0;


        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                if (state[i][j] == 0){
                    blank[0] = i;
                    blank[1] = j;
                }
                for (int a = 0; a < 4; a++) {
                    for (int b = 0; b < 4; b++) {
                        if (state[i][j] == boardSolution[a][b]){
                            difference = difference + Math.abs(i-a) +Math.abs(j-b);
                        }

                    }
                }

                hScore = difference;
            }
        }
        fScore = hScore + gScore;

        if (blank[1] > 0){
            neighbour.add(1);
        }
        if (blank[1] < 3){
            neighbour.add(2);
        }
        if (blank[0] > 0){
            neighbour.add(3);
        }
        if (blank[0] < 3){
            neighbour.add(4);
        }


    }

    public int getfScore() {
        return fScore;
    }

    public int getgScore() {
        return gScore;
    }

    public int[][] getBoard() {
        return state;
    }

    public int[] getBlank(){
        return blank;
    }

    public List<Integer> getNeighbour() {
        return neighbour;
    }

    public boolean solved(){
        return (gScore == fScore);
    }

    public List<String> getMoves() {
        return moves;
    }
}

